<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Script-Type" content="text/javascript"/>
<meta http-equiv="Content-type" content="text/html; charset=UTF-8"/>
<title>ポーカー(対ディーラー)</title>
<script type="text/javascript" src="./JS/jquery-1.8.1.js"></script>
<script type="text/javascript" src="./JS/Com.js"></script>
<script type="text/javascript" src="./JS/GV_Versus.js"></script>
<script type="text/javascript" src="./JS/Card.js"></script>
<script type="text/javascript" src="./JS/CardArrUtil.js"></script>
<script type="text/javascript" src="./JS/CardDeck.js"></script>
<script type="text/javascript" src="./JS/Disp_Versus.js"></script>
<script type="text/javascript" src="./JS/Player.js"></script>
<script type="text/javascript" src="./JS/PokerHand.js"></script>
<script type="text/javascript">
    //**********************************
    //Ver 1.0.1
    //**********************************

    var g_state;         //state
    var EN_STATE = { INI: 0, CARD_SELECT: 1, PKHAND_JUDGE: 2, BERSERKER: 3 };
    var g_player;        //プレイヤー
    var g_dealer;        //ディーラー
    var g_cardDeck;      //カードデッキ
    var g_arrAnimeTimer; //timer配列
    var g_gradStrTimer;  //グラデーション文字列タイマー
    var g_bgmNum;        //現在のBGM番号

    //**********************************
    //ゲームメイン処理
    //**********************************
    function gameMain(arg_btn) {
        //画面情報取得
        Disp.setDispInfo();

        ////state移動
        //switch (arg_btn) { }

        //画面処理
        Disp.showDispByState(g_state, true);  //内部処理前

        //内部処理
        play(g_state, true);

        //画面処理
        Disp.showDispByState(g_state, false); //内部処理後

        //state移動
        switch (g_state) {
            //初期、ポーカーハンドジャッジ後
            case EN_STATE.INI:
            case EN_STATE.PKHAND_JUDGE:
                g_state = EN_STATE.CARD_SELECT;
                break;
            //交換カード選択時
            case EN_STATE.CARD_SELECT:
                g_state = EN_STATE.PKHAND_JUDGE;
                break;
        }
    }

    //**********************************
    //ゲームプレイ処理 ※ｱﾆﾒｰｼｮﾝ含
    //arg_state：state
    //**********************************
    function play(arg_state) {
        stopAnimate(g_arrAnimeTimer); //アニメーション中断
        clearTimeout(g_gradStrTimer);
        playSE(G_EN_SE.STOP);         //SE停止

        switch (arg_state) {
            //初期、ポーカーハンドジャッジ後
            case EN_STATE.INI:
            case EN_STATE.PKHAND_JUDGE:
                g_cardDeck = new CardDeck(g_dispInfo.chkUseJoker);         //カードデッキインスタンス生成

                //***プレイヤー側***
                if (G_BROWZER == "ie9" || G_BROWZER == "ie10") {
                    Disp.clearHand(g_player.hand, G_PLAYER_ID.PLAYER);
                }
                playSE(G_EN_SE.SHUFFLE, G_USE_SE);                         //SE:シャッフル
                animate([
                { anime: function () {
                    g_player.clearHand();                                  //手札クリア
                    g_player.cardDeck = g_cardDeck;                        //カードデッキセット
                    g_player.setHand(false);                               //手札セット
                    g_player.sortHand();                                   //手札ソート
                    Disp.toPublicGrad(g_player.hand, G_PLAYER_ID.PLAYER, false, true, false); //手札を裏向きに表示
                }, interval: G_TOFACE_LAG * 10 },

                { anime: function () {
                    Disp.toPublicGrad(g_player.hand, G_PLAYER_ID.PLAYER);  //手札を表向きに返す
                }, interval: G_TOFACE_LAG * 10
                }], g_arrAnimeTimer);

                //***ディーラー側***
                if (G_BROWZER == "ie9" || G_BROWZER == "ie10") {
                    Disp.clearHand(g_dealer.hand, G_PLAYER_ID.DEALER);
                }
                animate([
                { anime: function () {
                    g_dealer.clearHand();                                  //手札クリア
                    g_dealer.cardDeck = g_cardDeck;                        //カードデッキセット
                    g_dealer.setHand(false, false);                        //手札セット
                    Disp.toPublicGrad(g_dealer.hand, G_PLAYER_ID.DEALER, false, true, false); //手札を裏向きに表示
                }, interval: G_TOFACE_LAG * 10
                }], g_arrAnimeTimer);
                break;

            //交換カード選択時
            case EN_STATE.CARD_SELECT:
                //***プレイヤー側***
                g_player.setDropFlg(g_dispInfo.chkCardArr);                //ドロップフラグを立てる
                g_player.setFaceByDropFlg(false);                          //ドロップフラグが立っているカードを裏向きにする
                Disp.applyHand(g_player.hand, G_PLAYER_ID.PLAYER);         //手札を画面に反映
                g_player.dropCardsByDropFlg();                             //ドロップフラグが立っているカードを捨てる
                g_player.setHand(false);                                   //手札セット(裏向き)
                //※手札交換後のプレイヤー手札のソートはとりあえず不要としておく
                // g_player.sortHand();                                      //手札ソート
                var pkHandP = new PokerHand(g_player.hand);                //ポーカーハンド情報生成
                animate([
                { anime: function () {
                    Disp.toPublicGrad(g_player.hand, G_PLAYER_ID.PLAYER);  //手札を表向きに返す
                    Disp.showPKHandStr(pkHandP, G_PLAYER_ID.PLAYER);       //ポーカーハンドを画面に反映
                }, interval: G_TOFACE_TIME * 10 },

                //***ディーラー側***
                {anime: function () {
                    var pkHandD = new PokerHand(g_dealer.hand);            //ポーカーハンド情報生成
                    g_dealer.dropCardByThink(pkHandD);                     //不要なカードのドロップフラグを立てる
                    g_dealer.setFaceByDropFlg(true);                       //不要なカードを表にする
                    Disp.applyHand(g_dealer.hand, G_PLAYER_ID.DEALER);     //手札を画面に反映
                    g_dealer.dropCardsByDropFlg();                         //ドロップフラグの立っているカードを捨てる
                }, interval: G_TOFACE_TIME * 20 },

                { anime: function () {
                    Disp.applyHand(g_dealer.hand, G_PLAYER_ID.DEALER);     //手札を画面に反映
                }, interval: G_TOFACE_TIME * 15 },

                { anime: function () {
                    g_dealer.setHand(false);                               //手札セット(裏向き)
                    Disp.applyHand(g_dealer.hand, G_PLAYER_ID.DEALER);     //手札を画面に反映
                }, interval: G_TOFACE_TIME * 10 },

                { anime: function () {
                    Disp.toPublicGrad(g_dealer.hand, G_PLAYER_ID.DEALER);  //手札を表向きに返す
                }, interval: G_TOFACE_TIME * 20 },

                { anime: function () {
                    g_dealer.sortHand(2);                                       //手札ソート
                    Disp.applyHand(g_dealer.hand, G_PLAYER_ID.DEALER);          //手札を画面に反映
                    pkHandD = new PokerHand(g_dealer.hand);                     //ポーカーハンド情報生成
                    Disp.toPublicGrad(g_dealer.hand, G_PLAYER_ID.DEALER, true); //手札を表向きに返す
                    playSE(G_EN_SE.PLACE);                                      //SE:カードを置く
                    Disp.showPKHandStr(pkHandD, G_PLAYER_ID.DEALER);            //ポーカーハンドを画面に反映
                }, interval: G_TOFACE_TIME * 25 },

            //***役比較***
                {anime: function () {
                    var cmpRlt = PokerHand.cmpPKHand(pkHandP, pkHandD);
                    Disp.showPKHandResult(cmpRlt)                        //勝敗結果を画面に反映
                    Disp.playSEByGame(cmpRlt, pkHandP);                  //ゲーム結果別にSEを出す
                }, interval: 0
                }], g_arrAnimeTimer);
            break;
        }
    }

    //**********************************
    //オンロード処理
    //**********************************
    function onloadFunc() {
        //処理上インスタンス生成が必要なものを生成
        new Disp(); new PokerHand(); new Card();
        //ブラウザ情報取得
        G_BROWZER = getBrowser();
        //画面項目
        Disp.enableChkCard(false);
        //変数初期化
        g_state = EN_STATE.INI;        //STATE設定
        g_arrAnimeTimer = new Array(); //timer配列
        g_bgmNum = 0;                  //BGM番号
        //ゲーム準備
        g_player = new Player();       //プレイヤーインスタンス生成
        g_dealer = new Player();       //ディーラーインスタンス生成
        //エフェクト
        playBGM(G_EN_BGM.INI);         //BGMをかける
    }

    //テスト用
    //※デバッグ用に残しておく
    function test() {
//        var d = new CardDeck(g_dispInfo.chkUseJoker); //カードデッキインスタンス生成
//        var p = new Player(d);
//        var cards_1 = new Array(new Card(0), new Card(9), new Card(10), new Card(11), new Card(12));  //ロイフラ
//        var cards_2 = new Array(new Card(0), new Card(13), new Card(26), new Card(39), new Card(52)); //ファイブカード
//        var cards_3 = new Array(new Card(0), new Card(1), new Card(2), new Card(3), new Card(4));     //ストレートフラッシュ
//        var cards_4 = new Array(new Card(0), new Card(13), new Card(26), new Card(39), new Card(1));  //フォーカード
//        var cards_5 = new Array(new Card(0), new Card(13), new Card(26), new Card(1), new Card(14));  //フルハウス
//        var cards_6 = new Array(new Card(0), new Card(1), new Card(2), new Card(3), new Card(5));     //フラッシュ
//        var cards_71 = new Array(new Card(0), new Card(9), new Card(10), new Card(11), new Card(25)); //ストレート(Ace)
//        var cards_72 = new Array(new Card(2), new Card(3), new Card(4), new Card(5), new Card(19));   //ストレート
//        var cards_8 = new Array(new Card(0), new Card(13), new Card(26), new Card(2), new Card(3));   //スリーカード
//        var cards_9 = new Array(new Card(0), new Card(13), new Card(1), new Card(14), new Card(2));   ///ツーペア
//        var cards_10 = new Array(new Card(0), new Card(13), new Card(5), new Card(20), new Card(26)); //ワンペア
//        p.hand = cards_10;
//        pkHand = new PokerHand(p.hand);             //ポーカーハンド情報生成
//        var cards2 = new Array(new Card(7), new Card(12), new Card(25), new Card(26), new Card(27));
//        pkHand2 = new PokerHand(cards2)
//        var a = p.hand.getInfo();
//        p.dropCardByThink(pkHand);
//        p.setHand();                         //手札セット
//        pkHand = new PokerHand(p.hand);             //ポーカーハンド情報生成
//        var b = p.hand.getInfo();
//        var VSResult = PokerHand.cmpPKHand(pkHand, pkHand2);
//        Disp.showPKHandStr(pkHand, G_PLAYER_ID.PLAYER);         //ポーカーハンドを画面に反映
//        alert(p.hand.getInfo());
    }

</script>
<style type="text/css">
    body
    {
        width: 700px;
        margin: 0 auto;
        height: 750px;
    }
</style>
</head>
<body onload="onloadFunc();">
    <div>
     <input id="btnTest" type="button" value="テスト" onclick="test()" style="visibility:hidden"/>
    </div>
    <div>
        <h1>クローズド・ポーカー（対ディーラー）</h1></div>
    <div>
    </div>
    <div style="height: 40px"> 
    <h2 id="PKHandStrD">ここに役名が表示されます</h2>
    </div>    
    <div style="background-color:Green; border:2px solid red">
    <table style="width:100%;">
            <tr>
                <td>
                    <img alt="" src="img/h01.gif" id="imgCardD0" width="100" /></td>                       
                <td>
                    <img alt="" src="img/h02.gif" id="imgCardD1" width="100" /></td>                       
                <td>
                    <img alt="" src="img/h03.gif" id="imgCardD2" width="100" /></td>                      
                <td>
                    <img alt="" src="img/h04.gif" id="imgCardD3" width="100" /></td>                       
                <td>
                    <img alt="" src="img/h05.gif" id="imgCardD4" width="100" /></td>                      
            </tr>
        </table>
    </div>
    <div style="height: 10px">
    </div>
    <div style="background-color:Green; border:2px solid red">
        <table style="width:100%;">
            <tr>
                <td>
                    <label for="chkCard0"><img alt="" src="img/s01.gif" id="imgCardP0" width="100" /></label></td>
                <td>
                    <label for="chkCard1"><img alt="" src="img/s02.gif" id="imgCardP1" width="100" /></label></td>
                <td>
                    <label for="chkCard2"><img alt="" src="img/s03.gif" id="imgCardP2" width="100" /></label></td>
                <td>
                    <label for="chkCard3"><img alt="" src="img/s04.gif" id="imgCardP3" width="100" /></label></td>
                <td>
                    <label for="chkCard4"><img alt="" src="img/s05.gif" id="imgCardP4" width="100" /></label></td>
            </tr>
            <tr>
                <td style="font-weight: bold; color: #00FF00">
                    <input id="chkCard0" type="checkbox" onclick="playSE(G_EN_SE.CARD_SEL);" /><label for="chkCard0">交換</label></td>
                <td style="font-weight: bold; color: #00FF00">
                    <input id="chkCard1" type="checkbox" onclick="playSE(G_EN_SE.CARD_SEL);"/><label for="chkCard1">交換</label></td>
                <td style="font-weight: bold; color: #00FF00">
                    <input id="chkCard2" type="checkbox" onclick="playSE(G_EN_SE.CARD_SEL);"/><label for="chkCard2">交換</label></td>
                <td style="font-weight: bold; color: #00FF00">
                    <input id="chkCard3" type="checkbox" onclick="playSE(G_EN_SE.CARD_SEL);"/><label for="chkCard3">交換</label></td>
                <td style="font-weight: bold; color: #00FF00">
                    <input id="chkCard4" type="checkbox" onclick="playSE(G_EN_SE.CARD_SEL);"/><label for="chkCard4">交換</label></td>
            </tr>
        </table>
    </div>
    <div align="center" style="height: 30px">
        <div style="float:left; width:35%; height:auto; text-align:left; position:relative; top:55%;">
        &nbsp;<input id="chkUseJoker" type="checkbox" onclick="playSE(G_EN_SE.CARD_SEL);"/><label for="chkUseJoker">ジョーカーを入れる</label>
        </div>
        <div style="float:left; width:65%; text-align:left; position:relative; top:45%;">
        <input id="btnExchg" type="button" style="width:200px; height:30px;" value="開始" onclick="gameMain('btnExchg')" />
        </div>
    </div>
    <div style="height: 40px">
        <div style="float:left; width:33%; height:auto; text-align:left; position:relative; top:55%;">
        <h2 id="PKHandStrP">役名</h2>
        </div>
        <div style="float:left; width:33%; text-align:center; position:relative; top:55%;">
        <h2 id="PKHandStrResult">勝敗結果</h2>
        </div>
        <div style="float:left; width:34%; text-align:left; position:relative; top:55%;">
        <h2>&nbsp;</h2>
        </div>
    </div>
    <div>
    &nbsp;
    </div>
    
 <div style="height: 50px"><address lang="en" >Copyright &copy; 2013 Kiyoshi. All Rights Reserved.</address>
     <address lang="en" >&nbsp;</address></div>
 <div>
     <div>使用BGM、SE提供者様</div>
     <div><a href="http://maoudamashii.jokersounds.com/" title="魔王魂"  target="_blank">魔王魂</a></div>
     <div><a href="http://www.rengoku-teien.com/index.html" title="煉獄庭園"  target="_blank">煉獄庭園</a></div>
     <div><a href="http://www.senses-circuit.com/material/se_game.html" title="フリー音楽素材 Senses Circuit"  target="_blank">フリー音楽素材 Senses Circuit</a></div>
     <div><a href="http://www.01earth.net/sound" title="フリー音素材 01SoundEarth"  target="_blank">フリー音素材 01SoundEarth</a></div>
     <div><a href="http://www.yen-soft.com/ssse/" title="On-Jin ～音人～＆E.EFFECT"  target="_blank">On-Jin ～音人～＆E.EFFECT</a></div>
 </div>

<div id="bgm" style="display:none"></div>
<div id="sound0" style="display:none"></div>
<div id="sound1" style="display:none"></div>
<div id="sound2" style="display:none"></div>
<div id="sound3" style="display:none"></div>
<div id="sound4" style="display:none"></div>
</body>
</html>
